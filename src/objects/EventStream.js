import EventEmitter from 'events';

/**
* A class representing a stream of events generated by polling a reddit API endpoint.
* <style> #EventStream {display: none} </style>
* @example
*
* // Get an EventStream
* let commentStream = r.getNewCommentStream('subredditName')
*
* @extends EventEmitter
*/
const EventStream = class EventStream extends EventEmitter {
  /**
  * @summary Constructs a new EventStream
  * @param {number} rate Will execute pollFn every rate milliseconds
  * @param {string} type Topic that events will be emitted to.
  * @param {function} pollFn The function to be polled. The results of pollFn() will be emitted.
  * @param {*} options The arguments pollFn should be called with.
  */
  constructor (rate, type, pollFn, ...options) {
    super();
    this.rate = rate;
    this.type = type;
    this.pollFn = pollFn;
    this.pollOptions = options;

    this.start();
  }
  _poll () {
    if (this.stopped) {
      return;
    }

    const startTime = Date.now();

    const req = this.pollFn(...this.pollOptions).then(data => {
      data.filter(piece => piece.created_utc >= startTime)
        .forEach(piece => this.emit(this.type, piece));
    }).catch(e => this.emit('error', e));

    // eslint-disable-next-line promise/catch-or-return
    req.then(() => setTimeout(this._poll, this.rate - (Date.now() - startTime)));
  }
  /**
  * @summary Will start the event stream. A new EventStream is started by default.
  * @example
  * let commentStream = r.getNewCommentStream('subredditName')
  * commentStream.start()
  */
  start () {
    this.stopped = false;
    this._poll();
  }
  /**
  * @summary Will stop the event stream.
  * @example
  * let commentStream = r.getNewCommentStream('subredditName')
  * commentStream.stop()
  */
  stop () {
    this.stopped = true;
  }
};

export default EventStream;
